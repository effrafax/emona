/*******************************************************************************
 *
 * Copyright (c) 2011  Martin Stockhammer <m.stockhammer@web.de>
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: 
 *   Martin Stockhammer - Initial API and implementation
 *
 *******************************************************************************/
/*
 * generated by Xtext
 */
package org.emona.edit.ui.contentassist;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.HashSet;
import java.util.Set;

import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.emona.model.base.ConfigObject;

/**
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on
 * how to customize content assistant
 */
public class NagiosCfgProposalProvider extends
		AbstractNagiosCfgProposalProvider {

	private final static Logger log = Logger
			.getLogger(NagiosCfgProposalProvider.class);

	private static Set<String> ignoredKeywords = new HashSet<String>();
	static {
		InputStream keywordInput = Thread.currentThread()
				.getContextClassLoader()
				.getResourceAsStream("org/emona/edit/attribute_keywords.txt");
		BufferedReader reader = new BufferedReader(new InputStreamReader(
				keywordInput));
		String line;
		try {
			while ((line = reader.readLine()) != null) {
				int tt = line.indexOf('=');
				String keyword = line.trim().substring(0, tt);
				log.debug("Add keyword: " + keyword);
				ignoredKeywords.add(keyword);
			}
		} catch (IOException e) {
			log.error("Could not load keyword resource file!");
		}
	}

	public NagiosCfgProposalProvider() {
		super();
	}

	@Override
	public void completeKeyword(Keyword keyword, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		EObject model = context.getCurrentModel();
		if (model instanceof ConfigObject
				&& ignoredKeywords.contains(keyword.getValue())) {
			return;
		} else {
			super.completeKeyword(keyword, context, acceptor);
		}

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.emona.edit.ui.contentassist.AbstractNagiosCfgProposalProvider#
	 * completeHostEscalationOptions_State(org.eclipse.emf.ecore.EObject,
	 * org.eclipse.xtext.Assignment,
	 * org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext,
	 * org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor)
	 */
	@Override
	public void completeHostEscalationOptions_State(EObject model,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		super.completeHostEscalationOptions_State(model, assignment, context,
				acceptor);
		System.out.println(model.eClass());

		if ("r".equals(context.getPrefix()) || "u".equals(context.getPrefix())
				|| "d".equals(context.getPrefix())) {
			ICompletionProposal prop = createCompletionProposal(
					context.getPrefix() + ",r", "UP State", null, context);
			acceptor.accept(prop);
			prop = createCompletionProposal(
					context.getPrefix() + ",u", "UNREACHABLE State", null, context);
			acceptor.accept(prop);
			prop = createCompletionProposal(
					context.getPrefix() + ",d", "DOWN State", null, context);
			acceptor.accept(prop);
		}
	}

	/*
	 * Overwrite to allow ",.."-Proposals for Option-Flags of attributes.
	 * 
	 * @see
	 * org.eclipse.xtext.ui.editor.contentassist.AbstractContentProposalProvider
	 * #isValidProposal(java.lang.String, java.lang.String,
	 * org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext)
	 */
	@Override
	protected boolean isValidProposal(String proposal, String prefix,
			ContentAssistContext context) {
		if (proposal.startsWith(",")) {
			return true;
		} else {
			return super.isValidProposal(proposal, prefix, context);
		}
	}

}