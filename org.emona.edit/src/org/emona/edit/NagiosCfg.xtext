/*
 * <copyright> 
 *
 * Copyright (c) 2011 Martin Stockhammer <m.stockhammer@web.de>
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: 
 *   Martin Stockhammer - Initial Grammar Definition
 *
 * </copyright>
 */
grammar org.emona.edit.NagiosCfg

generate nagiosCfg "http://www.emona.org/edit/NagiosCfg"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/org.emona.model/model/base.ecore" as baseModel
import "platform:/resource/org.emona.model/model/base.ecore#//attributes" as baseAttributes
import "platform:/resource/org.emona.model/model/base.ecore#//attributes/time" as eatime


ObjectModel hidden(IL_WS, NL):
    info+=InfoObject*;

InfoObject returns baseModel::InfoObject:
    ConfigObject | CommentLine ;

ConfigObject returns baseModel::ConfigObject hidden(IL_WS, NL):
    Host | Hostgroup | Service | Servicegroup | Command | Timeperiod | Contact | Contactgroup |
    Servicedependency | Serviceescalation | Hostdependency | Hostescalation | Hostextinfo | Serviceextinfo;


    // Proposals haben Probleme mit NL !!!
Host returns baseModel::Host:
    {baseModel::Host}
    'define' 'host' '{'
    attr+=HostAttribute*
    '}';

HostAttribute returns baseModel::Attribute hidden(IL_WS):
    (HostName | DisplayName | Alias | Address | Parents |
    Hostgroups | CheckCommand | HostInitialState | MaxCheckAttempts |
    CheckInterval | RetryInterval | ActiveChecksEnabled |
    PassiveChecksEnabled | CheckPeriod |
    ObsessOverHost | CheckFreshness | FreshnessThreshold |
    EventHandler | EventHandlerEnabled | FlapDetectionEnabled |
    LowFlapThreshold | HighFlapThreshold | HostFlapDetectionOptions |
    ProcessPerfData | RetainStatusInformation | RetainNonStatusInformation |
    Contacts | ContactGroups |
    NotificationPeriod | HNotificationOptions | NotificationsEnabled |
    NotificationInterval | FirstNotificationDelay | HostStalkingOptions |
    Notes | NotesUrl | ActionUrl |
    IconImage | IconImageAlt | VrmlImage | StatusMapImage |
    TwoDCoords | ThreeDCoords |
    TemplateAttribute) comment=SL_COMMENT? NL;

HostName returns baseAttributes::HostName:
    'host_name' name=HostNameEntry;

/* */
/* 
 * Hostgroup
 * =========
 * 
  define hostgroup{
    hostgroup_name    hostgroup_name
    alias    alias
    members    hosts
    hostgroup_members    hostgroups
    notes    note_string
    notes_url    url
    action_url    url
  }
 * 
 */
Hostgroup returns baseModel::Hostgroup:
    {baseModel::Hostgroup}
    'define' 'hostgroup' '{'
    attr+=HostgroupAttribute*
    '}';

HostgroupAttribute returns baseModel::Attribute hidden(IL_WS):
    (HostgroupName | Alias | HostMembers | HostgroupMembers |
    ActionUrl | Notes | NotesUrl | TemplateAttribute) comment=SL_COMMENT? NL;

HostgroupName returns baseAttributes::HostgroupName:
    'hostgroup_name' name=HostgroupNameEntry;

/* */
/*
 * **************************************
 * Service Element 
 * ===============
 * **************************************
 * 
 * 
  define service{
    host_name   host_name
    hostgroup_name  hostgroup_name
    service_description service_description
    display_name    display_name
    servicegroups   servicegroup_names
    is_volatile [0/1]
    check_command   command_name
    initial_state   [o,w,u,c]
    max_check_attempts  #
    check_interval  #
    retry_interval  #
    active_checks_enabled   [0/1]
    passive_checks_enabled  [0/1]
    check_period    timeperiod_name
    obsess_over_service [0/1]
    check_freshness [0/1]
    freshness_threshold #
    event_handler   command_name
    event_handler_enabled   [0/1]
    low_flap_threshold  #
    high_flap_threshold #
    flap_detection_enabled  [0/1]
    flap_detection_options  [o,w,c,u]
    process_perf_data   [0/1]
    retain_status_information   [0/1]
    retain_nonstatus_information    [0/1]
    notification_interval   #
    first_notification_delay    #
    notification_period timeperiod_name
    notification_options    [w,u,c,r,f,s]
    notifications_enabled   [0/1]
    contacts    contacts
    contact_groups  contact_groups
    stalking_options    [o,w,u,c]
    notes   note_string
    notes_url   url
    action_url  url
    icon_image  image_file
    icon_image_alt  alt_string
    }
 *
 * 
 * 
 */
Service returns baseModel::Service:
    {baseModel::Service}
    'define' 'service' '{'
    attr+=ServiceAttribute*
    '}';

ServiceAttribute returns baseModel::Attribute hidden(IL_WS):
    (HostNameReference | HostgroupNameReference | ServiceDescription | DisplayName |
    Servicegroups | IsVolatile | CheckCommand | ServiceInitialState |
    MaxCheckAttempts | CheckInterval | RetryInterval |
    ActiveChecksEnabled | PassiveChecksEnabled | CheckPeriod |
    ObsessOverService | CheckFreshness | FreshnessThreshold |
    EventHandler | EventHandlerEnabled |
    LowFlapThreshold | HighFlapThreshold | FlapDetectionEnabled | ServiceFlapDetectionOptions |
    ProcessPerfData | RetainStatusInformation | RetainNonStatusInformation |
    NotificationInterval | FirstNotificationDelay | NotificationPeriod |
    ServiceNotificationOptions | NotificationsEnabled |
    Contacts | ContactGroups | ServiceStalkingOptions | Notes | NotesUrl | ActionUrl |
    IconImage | IconImageAlt |
    TemplateAttribute) comment=SL_COMMENT? NL;

ServiceDescription returns baseAttributes::ServiceDescription:
    'service_description' name=ServiceDescriptionEntry;

ServiceDescriptionEntry:
    UID+;

/* */
/*
 * **************************************
 * Servicegroup element
 * ======================================
 * **************************************
 * 
   define servicegroup{
    servicegroup_name   servicegroup_name
    alias   alias
    members services
    servicegroup_members    servicegroups
    notes   note_string
    notes_url   url
    action_url  url
    }
 */
Servicegroup returns baseModel::Servicegroup:
    {baseModel::Servicegroup}
    'define' 'servicegroup' '{'
    attr+=ServicegroupAttribute*
    '}';

ServicegroupAttribute returns baseModel::Attribute hidden(IL_WS):
    (ServicegroupName | Alias | ServiceMembers | ServicegroupMembers |
    Notes | NotesUrl | ActionUrl | TemplateAttribute) comment=SL_COMMENT? NL;

ServicegroupName returns baseAttributes::ServicegroupName:
    'servicegroup_name' name=ServicegroupNameEntry;

ServicegroupNameEntry:
    UID;

/* */
/*
 * **************************************
 * Servicedependency element
 * ======================================
 * **************************************
 * 
 * 
 * define servicedependency{
    dependent_host_name host_name
    dependent_hostgroup_name    hostgroup_name
    dependent_service_description   service_description
    host_name   host_name
    hostgroup_name  hostgroup_name
    service_description service_description
    inherits_parent [0/1]
    execution_failure_criteria  [o,w,u,c,p,n]
    notification_failure_criteria   [o,w,u,c,p,n]
    dependency_period   timeperiod_name
    }
 */
Servicedependency returns baseModel::Servicedependency:
    {baseModel::Servicedependency}
    'define' 'servicedependency' '{'
    attr+=ServicedependencyAttribute*
    '}';

ServicedependencyAttribute returns baseModel::Attribute hidden(IL_WS):
    (DependentHostName | DependentHostgroupName | DependentServiceDescription |
    HostNameReference | HostgroupNameReference | ServiceDescriptionReference |
    InheritsParent | ServiceExecutionFailureCriteria | ServiceNotificationFailureCriteria |
    DependencyPeriod | TemplateAttribute) comment=SL_COMMENT? NL;

/* */
/*
 * **************************************
 * Service Escalation element
 * ======================================
 * **************************************
 * 
 * 
 * define serviceescalation{
    host_name   host_name
    hostgroup_name  hostgroup_name
    service_description service_description
    contacts    contacts
    contact_groups  contactgroup_name
    first_notification  #
    last_notification   #
    notification_interval   #
    escalation_period   timeperiod_name
    escalation_options  [w,u,c,r]
    }
 *
 *  
 */
Serviceescalation returns baseModel::Serviceescalation:
    {baseModel::Serviceescalation}
    'define' 'serviceescalation' '{'
    attr+=ServiceescalationAttribute*
    '}';

ServiceescalationAttribute returns baseModel::Attribute hidden(IL_WS):
    (DependentHostName | DependentHostgroupName | DependentServiceDescription |
    Contacts | ContactGroups |
    FirstNotification | LastNotification | NotificationInterval |
    EscalationPeriod | ServiceEscalationOptions | TemplateAttribute) comment=SL_COMMENT? NL;

/* */
/*
 * **************************************
 * Host Dependency element
 * ======================================
 * **************************************
 * 
 * 
 * define hostdependency{
    dependent_host_name host_name
    dependent_hostgroup_name    hostgroup_name
    host_name   host_name
    hostgroup_name  hostgroup_name
    inherits_parent [0/1]
    execution_failure_criteria  [o,d,u,p,n]
    notification_failure_criteria   [o,d,u,p,n]
    dependency_period   timeperiod_name
    }
 */
Hostdependency returns baseModel::Hostdependency:
    {baseModel::Hostdependency}
    'define' 'hostdependency' '{'
    attr+=HostdependencyAttribute*
    '}';

HostdependencyAttribute returns baseModel::Attribute hidden(IL_WS):
    (DependentHostName | DependentHostgroupName |
    HostNameReference | HostgroupNameReference |
    InheritsParent | HostExecutionFailureCriteria | HostNotificationFailureCriteria |
    DependencyPeriod | TemplateAttribute) comment=SL_COMMENT? NL;

/* */
/*
 * **************************************
 * Host Escalation element
 * ======================================
 * **************************************
 * 
 * 
 * define hostescalation{
    host_name   host_name
    hostgroup_name  hostgroup_name
    contacts    contacts
    contact_groups  contactgroup_name
    first_notification  #
    last_notification   #
    notification_interval   #
    escalation_period   timeperiod_name
    escalation_options  [d,u,r]
    }
 */
Hostescalation returns baseModel::Hostescalation:
    {baseModel::Hostescalation}
    'define' 'hostescalation' '{'
    attr+=HostescalationAttribute*
    '}';

HostescalationAttribute returns baseModel::Attribute hidden(IL_WS):
    (DependentHostName | DependentHostgroupName |
    Contacts | ContactGroups |
    FirstNotification | LastNotification | NotificationInterval |
    EscalationPeriod | HostEscalationOptions | TemplateAttribute) comment=SL_COMMENT? NL;

/* */
/*
 * 
 * **************************************
 * Extended Host Information element
 * ======================================
 * **************************************
 *
 *  
 * define hostextinfo{
    host_name   host_name
    notes   note_string
    notes_url   url
    action_url  url
    icon_image  image_file
    icon_image_alt  alt_string
    vrml_image  image_file
    statusmap_image image_file
    2d_coords   x_coord,y_coord
    3d_coords   x_coord,y_coord,z_coord
    }
 */
Hostextinfo returns baseModel::Hostextinfo:
    {baseModel::Hostextinfo}
    'define' 'hostextinfo' '{'
    attr+=HostextinfoAttribute*
    '}';

HostextinfoAttribute returns baseModel::Attribute hidden(IL_WS):
    (HostNameReference | Notes | NotesUrl |
    ActionUrl | IconImage | IconImageAlt | VrmlImage | StatusMapImage |
    TwoDCoords | ThreeDCoords | TemplateAttribute) comment=SL_COMMENT? NL;

/* */
/*
 * **************************************
 * Extended Host Information element
 * ======================================
 * **************************************
 * 
 * define serviceextinfo{
    host_name   host_name
    service_description service_description
    notes   note_string
    notes_url   url
    action_url  url
    icon_image  image_file
    icon_image_alt  alt_string
    }
 */
Serviceextinfo returns baseModel::Serviceextinfo:
    {baseModel::Serviceextinfo}
    'define' 'serviceextinfo' '{'
    attr+=ServiceextinfoAttribute*
    '}';

ServiceextinfoAttribute returns baseModel::Attribute hidden(IL_WS):
    (HostNameReference | ServiceDescriptionReference |
    Notes | NotesUrl | IconImage | IconImageAlt | TemplateAttribute) comment=SL_COMMENT? NL;

/* */
/*
 * **************************************
 * Command element
 * ===============
 * **************************************
 */
Command returns baseModel::Command:
    {baseModel::Command}
    'define' 'command' '{'
    attr+=CommandAttribute*
    '}';

CommandAttribute returns baseModel::Attribute hidden(IL_WS):
    (CommandName | CommandLine | Alias | TemplateAttribute) comment=SL_COMMENT? NL;

/* */
/*
 * **************************************
 * Timeperiod element
 * ==================
 * **************************************
 */
Timeperiod returns baseModel::Timeperiod:
    {baseModel::Timeperiod}
    'define' 'timeperiod' '{'
    attr+=TimeperiodAttribute*
    '}';

TimeperiodAttribute returns baseModel::Attribute hidden(IL_WS):
    (TimeperiodName |
    TimeDefinition | Alias | TemplateAttribute | TimeExclude) comment=SL_COMMENT? NL;

/* */
/*
 * **************************************
 * Contact Element
 * ===============
 * **************************************
 */
Contact returns baseModel::Contact:
    {baseModel::Contact}
    'define' 'contact' '{'
    attr+=ContactAttribute*
    '}';

ContactAttribute returns baseModel::Attribute hidden(IL_WS):
    (ContactName | HostNotificationsEnabled |
    ServiceNotificationsEnabled | HostNotificationPeriod |
    ServiceNotificationPeriod | HostNotificationOptions |
    ServiceNotificationOptions | HostNotificationCommands |
    ServiceNotificationCommands | Email | Pager |
    ContactAddress | CanSubmitCommands |
    Alias | TemplateAttribute) comment=SL_COMMENT? NL;

/* */
/*
 * **************************************
 * ContactGroup Element
 * ====================
 * **************************************
 */
Contactgroup returns baseModel::Contactgroup:
    {baseModel::Contactgroup}
    'define' 'contactgroup' '{'
    attr+=ContactgroupAttribute*
    '}';

ContactgroupAttribute returns baseModel::Attribute hidden(IL_WS):
    (ContactGroupName | ContactMembers | Alias | TemplateAttribute) comment=SL_COMMENT? NL;

/* */
/*
 * **************************************
 * Template attributes
 * **************************************
 */
TemplateAttribute returns baseModel::Attribute:
    (Use | Register | TemplateName);

Use returns baseAttributes::Use:
    'use' reference+=[baseAttributes::TemplateName|UID] (COMMA reference+=[baseAttributes::TemplateName|UID])*;

TemplateName returns baseAttributes::TemplateName:
    'name' name=IdOrKeyword;

Register returns baseAttributes::Register:
    'register' enabled=TrueFalse;

/* */
/*
 * **************************************
 * Common attributes
 * **************************************
 */
Alias returns baseAttributes::Alias:
    'alias' value=Entry;

DisplayName returns baseAttributes::DisplayName:
    'display_name' value=Entry;

/* */
/*
 * Host/Service Attribute 'max_check_attempts': The maximum check attempts.
 */
MaxCheckAttempts returns baseAttributes::MaxCheckAttempts:
    'max_check_attempts' value=INT;

/* */
/*
 * Host/Service Attribute 'check_interval': The interval between checks.
 */
CheckInterval returns baseAttributes::CheckInterval:
    'check_interval' value=INT;

/* */
/*
 * Host/Service Attribute 'retry_interval': The interval between a failed check and the next
 * check attempt.
 */
RetryInterval returns baseAttributes::RetryInterval:
    'retry_interval' value=INT;

/* */
/*
 * Host/Service Attribute 'active_checks_enabled': Boolean attribute [0/1]
 */
ActiveChecksEnabled returns baseAttributes::ActiveChecksEnabled:
    'active_checks_enabled' enabled=TrueFalse;

/* */
/*
 * Host/Service Attribute 'passive_checks_enabled': Boolean attribute [0/1]
 */
PassiveChecksEnabled returns baseAttributes::PassiveChecksEnabled:
    'passive_checks_enabled' enabled=TrueFalse;

/* */
/*
 * Host/Service Attribute 'check_period': Reference to the time period definition.
 */
CheckPeriod returns baseAttributes::CheckPeriod:
    'check_period' reference=[baseAttributes::TimeperiodName|TimeperiodNameEntry];

/* */
/*
 * Host/Service Attribute 'check_freshness': Boolean
 */
CheckFreshness returns baseAttributes::CheckFreshness:
    'check_freshness' enabled=TrueFalse;

/* */
/*
 * Host/Service Attribute 'freshness_threshold': Integer value
 */
FreshnessThreshold returns baseAttributes::FreshnessThreshold:
    'freshness_threshold' value=INT;

/* */
/*
 * Host/Service Attribute 'event_handler': Reference to command
 */
EventHandler returns baseAttributes::EventHandler:
    'event_handler' reference=[baseAttributes::CommandName|CommandNameEntry];

/* */
/*
 * Host/Service Attribute 'event_handler_enabled': Boolean
 */
EventHandlerEnabled returns baseAttributes::EventHandlerEnabled:
    'event_handler_enabled' enabled=TrueFalse;

/* */
/*
 * Host/Service Attribute 'low_flap_threshold': Integer value
 */
LowFlapThreshold returns baseAttributes::LowFlapThreshold:
    'low_flap_threshold' value=INT;

/* */
/*
 * Host/Service Attribute 'high_flap_threshold': Integer value
 */
HighFlapThreshold returns baseAttributes::HighFlapThreshold:
    'high_flap_threshold' value=INT;

/* */
/*
 * Host/Service Attribute 'flap_detection_enabled': Boolean
 */
FlapDetectionEnabled returns baseAttributes::FlapDetectionEnabled:
    'flap_detection_enabled' enabled=TrueFalse;

/* */
/*
 * Host/Service Attribute 'process_perf_data': Boolean
 */
ProcessPerfData returns baseAttributes::ProcessPerfData:
    'process_perf_data' enabled=TrueFalse;

/* */
/*
 * Host/Service Attribute 'retain_status_information': Boolean
 */
RetainStatusInformation returns baseAttributes::RetainStatusInformation:
    'retain_status_information' enabled=TrueFalse;

/* */
/*
 * Host/Service Attribute 'retain_nonstatus_information': Boolean
 */
RetainNonStatusInformation returns baseAttributes::RetainNonstatusInformation:
    'retain_nonstatus_information' enabled=TrueFalse;

/* */
/*
 * Host/Service Attribute 'notification_period': Reference to timeperiod
 */
NotificationPeriod returns baseAttributes::NotificationPeriod:
    'notification_period' reference=[baseAttributes::TimeperiodName|TimeperiodNameEntry];

/* */
/*
 * Host/Service Attribute 'notifications_enabled': Boolean
 */
NotificationsEnabled returns baseAttributes::NotificationsEnabled:
    'notifications_enabled' enabled=TrueFalse;

/* */
/*
 * Host/Service Attribute 'notification_interval': Integer Value
 */
NotificationInterval returns baseAttributes::NotificationInterval:
    'notification_interval' value=INT;

/* */
/*
 * Host/Service Attribute 'first_notification_delay': Integer value
 */
FirstNotificationDelay returns baseAttributes::FirstNotificationDelay:
    'first_notification_delay' value=INT;

/* */
/*
 * Host/Service Attribute 'contacts': Reference to contact
 */
Contacts returns baseAttributes::Contacts:
    'contacts' reference+=[baseAttributes::ContactName|ContactNameEntry] (COMMA
    reference+=[baseAttributes::ContactName|ContactNameEntry])*;

/* */
/*
 * Host/Service Attribute 'contact_groups': Reference to contact group
 */
ContactGroups returns baseAttributes::ContactGroups:
    'contact_groups' reference+=[baseAttributes::ContactGroupName|ContactGroupNameEntry] (COMMA
    reference+=[baseAttributes::ContactGroupName|ContactGroupNameEntry])*;

/* */
/*
 * Host/Service Attribute 'notes': Any Entry
 */
Notes returns baseAttributes::Notes:
    'notes' value=Entry;

/* */
/*
 * Host/Service Attribute 'notes_url': Any entry
 */
NotesUrl returns baseAttributes::NotesUrl:
    'notes_url' value=Entry;

/* */
/*
 * Host/Service Attribute 'action_url': Any entry
 */
ActionUrl returns baseAttributes::ActionUrl:
    'action_url' value=Entry;

/* */
/*
 * Host/Service Attribute 'icon_image': Any entry
 */
IconImage returns baseAttributes::IconImage:
    'icon_image' value=Entry;

/* */
/*
 * Host/Service Attribute 'icon_image_alt': Any entry
 */
IconImageAlt returns baseAttributes::IconImageAlt:
    'icon_image_alt' value=Entry;

/* */
/*
 * **************************************
 * Host attributes
 * **************************************
 */
/*
    host_name    host_name
    alias    alias
    display_name    display_name
    address    address
    parents    host_names
    hostgroups    hostgroup_names
    check_command    command_name
    initial_state    [o,d,u]
    max_check_attempts    #
    check_interval    #
    retry_interval    #
    active_checks_enabled    [0/1]
    passive_checks_enabled    [0/1]
    check_period    timeperiod_name
    obsess_over_host    [0/1]
    check_freshness    [0/1]
    freshness_threshold    #
    event_handler    command_name
    event_handler_enabled    [0/1]
    low_flap_threshold    #
    high_flap_threshold    #
    flap_detection_enabled    [0/1]
    flap_detection_options    [o,d,u]
    process_perf_data    [0/1]
    retain_status_information    [0/1]
    retain_nonstatus_information    [0/1]
    contacts    contacts
    contact_groups    contact_groups
    notification_interval    #
    first_notification_delay    #
    notification_period    timeperiod_name
    notification_options    [d,u,r,f,s]
    notifications_enabled    [0/1]
    stalking_options    [o,d,u]
    notes    note_string
    notes_url    url
    action_url    url
    icon_image    image_file
    icon_image_alt    alt_string
    vrml_image    image_file
    statusmap_image    image_file
    2d_coords    x_coord,y_coord
    3d_coords    x_coord,y_coord,z_coord
*/
Address returns baseAttributes::Address:
    'address' value=(IpAddress | NameAddress);

Parents returns baseAttributes::Parents:
    'parents' reference+=[baseAttributes::HostName|HostNameEntry] (COMMA
    reference+=[baseAttributes::HostName|HostNameEntry])*;

Hostgroups returns baseAttributes::Hostgroups:
    'hostgroups' reference+=[baseAttributes::HostgroupName|HostgroupNameEntry] (COMMA
    reference+=[baseAttributes::HostgroupName|HostgroupNameEntry])*;

HostInitialState returns baseAttributes::HostInitialState:
    'initial_state' value=HostStateValue;

ObsessOverHost returns baseAttributes::ObsessOverHost:
    'obsess_over_host' enabled=TrueFalse;

/* */
/*
 * Host Attribute 'stalking_options': HostStateValue
 */
HostStalkingOptions returns baseAttributes::HostStalkingOptions:
    {baseAttributes::HostStalkingOptions}
    'stalking_options' (up?='u'? & down?='d'? & unreachable?='u'?);

/* */
/*
 * Host Attribute 'flap_detection_options': Boolean
 */
HostFlapDetectionOptions returns baseAttributes::HostFlapDetectionOptions:
    'flap_detection_options' value=HostStateValue;

HNotificationOptions returns baseAttributes::HostNotificationOptions hidden(IL_WS, COMMA):
    {baseAttributes::HostNotificationOptions}
    'notification_options' (recovery?='r'? & down?='d'? & unreachable?='u'? & flapping?='f'? & scheduledDowntime?='s'?
    & none?='n'?);

VrmlImage returns baseAttributes::VrmlImage:
    'vrml_image' value=Entry;

StatusMapImage returns baseAttributes::StatusmapImage:
    'statusmap_image' value=Entry;

TwoDCoords returns baseAttributes::TwoDCoords:
    '2d_coords' xcoord=INT COMMA ycoord=INT;

ThreeDCoords returns baseAttributes::ThreeDCoords:
    '3d_coords' xcoord=RealNumber COMMA ycoord=RealNumber COMMA zcoord=RealNumber;

/* */
/*
 * **************************************
 * Hostgroup attributes
 * **************************************
 */
HostgroupMembers returns baseAttributes::HostgroupMembers:
    'hostgroup_members' reference+=[baseAttributes::HostgroupName|HostgroupNameEntry] (COMMA
    reference+=[baseAttributes::HostgroupName|HostgroupNameEntry])*;

HostMembers returns baseAttributes::HostMembers:
    'members' reference+=[baseAttributes::HostName|HostNameEntry] (COMMA
    reference+=[baseAttributes::HostName|HostNameEntry])*;

/* */
/*
 * **************************************
 * Service Attributes
 * **************************************
 */
/* */
/*
 * Service Attribute 'servicegroups'. Reference to one or more servicegroups.
 */
Servicegroups returns baseAttributes::Servicegroups:
    'servicegroups' reference+=[baseAttributes::ServicegroupName|ServicegroupNameEntry]
    (COMMA reference+=[baseAttributes::ServicegroupName|ServicegroupNameEntry])*;
/* */
/*
 * Service/ServiceDependency Attribute 'host_name'. Reference to one or more host names.
 */
HostNameReference returns baseAttributes::HostNameReference:
    'host_name' reference+=[baseAttributes::HostName|HostNameEntry] (COMMA
    reference+=[baseAttributes::HostName|HostNameEntry])*;
/* */
/*
 * Service/ServiceDependency Attribute 'hostgroup_name': Reference to one or more hostgroup names.
 */
HostgroupNameReference returns baseAttributes::HostgroupNameReference:
    'hostgroup_name' reference+=[baseAttributes::HostgroupName|HostgroupNameEntry] (COMMA
    reference+=[baseAttributes::HostgroupName|HostgroupNameEntry])*;
/* */
/*
 * Service Attribute 'is_volatile': Boolean Attribute [0/1].
 */
IsVolatile returns baseAttributes::IsVolatileFlag:
    'is_volatile' enabled=TrueFalse;
/* */
/*
 * Service Attribute 'initial_state': The assumed initial state [OK|WARNING|CRITICAL|UNKNOWN] 
 */
ServiceInitialState returns baseAttributes::ServiceInitialState:
    'initial_state' value=ServiceStateValue;
/* */
/*
 * Service Attribute 'obsess_over_service' 
 */
ObsessOverService returns baseAttributes::ObsessOverService:
    'obsess_over_service' enabled=TrueFalse;
/* */
/*
 * Host Attribute 'flap_detection_options': Boolean
 */
ServiceFlapDetectionOptions returns baseAttributes::ServiceFlapDetectionOptions:
    {baseAttributes::ServiceFlapDetectionOptions}
    'flap_detection_options' (ok?='o'? & warning?='w'? & critical?='c'? & unknown?='u'?);

/* */
/*
 * Service Attribute 'stalking_options': HostStateValue
 */
ServiceStalkingOptions returns baseAttributes::ServiceStalkingOptions:
    {baseAttributes::ServiceStalkingOptions}
    'stalking_options' (ok?='o'? & warning?='w'? & critical?='c'? & unknown?='u'?);

/* */
/*
 * **************************************
 * Servicegroup Attributes
 * **************************************
 */
ServiceMembers returns baseAttributes::ServiceMembers:
    'members' reference+=[baseAttributes::ServiceDescription|ServiceDescriptionEntry]
    (COMMA reference+=[baseAttributes::ServiceDescription|ServiceDescriptionEntry])*;

ServicegroupMembers returns baseAttributes::ServicegroupMembers:
    'servicegroup_members' reference+=[baseAttributes::ServicegroupName|ServicegroupNameEntry]
    (COMMA reference+=[baseAttributes::ServicegroupName|ServicegroupNameEntry])*;

/* */
/*
 * **************************************
 * Servicedependency Attributes
 * **************************************
 */
DependentHostName returns baseAttributes::DependentHostName:
    {baseAttributes::DependentHostName}
    'dependent_host_name' reference+=[baseAttributes::HostName|HostNameEntry]?
    (COMMA reference+=[baseAttributes::HostName|HostNameEntry])*;

DependentHostgroupName returns baseAttributes::DependentHostgroupName:
    'dependent_hostgroup_name' reference+=[baseAttributes::HostgroupName|HostgroupNameEntry]
    (COMMA reference+=[baseAttributes::HostgroupName|HostgroupNameEntry])*;

DependentServiceDescription returns baseAttributes::DependentServiceDescription:
    'dependent_service_description' reference=[baseAttributes::ServiceDescription|ServiceDescriptionEntry];

InheritsParent returns baseAttributes::InheritsParent:
    'inherits_parent' enabled=TrueFalse;

ServiceExecutionFailureCriteria returns baseAttributes::ServiceExecutionFailureCriteria hidden(IL_WS, COMMA):
    {baseAttributes::ServiceExecutionFailureCriteria}
    'execution_failure_criteria' (ok?='o'? & warning?='w'? & critical?='c'? & unknown?='u'? & pending?='p'? &
    none?='n'?);

ServiceNotificationFailureCriteria returns baseAttributes::ServiceNotificationFailureCriteria hidden(IL_WS, COMMA):
    {baseAttributes::ServiceNotificationFailureCriteria}
    'notification_failure_criteria' (ok?='o'? & warning?='w'? & critical?='c'? & unknown?='u'? & pending?='p'? &
    none?='n'?);

DependencyPeriod returns baseAttributes::DependencyPeriod:
    'dependency_period' reference=[baseAttributes::TimeperiodName|TimeperiodNameEntry];

/* */
/*
 * **************************************
 * Service Escalation Attributes
 * **************************************
 */
FirstNotification returns baseAttributes::FirstNotification:
    'first_notification' value=INT;

LastNotification returns baseAttributes::LastNotification:
    'last_notification' value=INT;

EscalationPeriod returns baseAttributes::EscalationPeriod:
    'escalation_period' reference=[baseAttributes::TimeperiodName|TimeperiodNameEntry];

ServiceEscalationOptions returns baseAttributes::ServiceEscalationOptions hidden(IL_WS, COMMA):
    {baseAttributes::ServiceEscalationOptions}
    'escalation_options' (ok?='o'? & warning?='w'? & critical?='c'? & unknown?='u'?);

/* */
/*
 * **************************************
 * Host Escalation Attributes
 * **************************************
 */
HostExecutionFailureCriteria returns baseAttributes::HostExecutionFailureCriteria hidden(IL_WS, COMMA):
    {baseAttributes::HostExecutionFailureCriteria}
    'execution_failure_criteria' (up?='o'? & down?='d'? & unreachable?='u'? & pending?='p'? & none?='n'?);

HostNotificationFailureCriteria returns baseAttributes::HostNotificationFailureCriteria hidden(IL_WS, COMMA):
    {baseAttributes::HostNotificationFailureCriteria}
    'notification_failure_criteria' (up?='o'? & down?='d'? & unreachable?='u'? & pending?='p'? & none?='n'?);

HostEscalationOptions returns baseAttributes::HostEscalationOptions hidden(IL_WS, COMMA):
    {baseAttributes::HostEscalationOptions}
    'escalation_options' (up?='r'? & down?='d'? & unreachable?='u'?);

/* */
/*
 * Attribute 'service_description': Reference to one or more service descriptions
 */
ServiceDescriptionReference returns baseAttributes::ServiceDescriptionReference:
    'service_description' reference+=[baseAttributes::ServiceDescription|ServiceDescriptionEntry]
    (COMMA reference+=[baseAttributes::ServiceDescription|ServiceDescriptionEntry])*;

/* */
/*
 * **************************************
 * Command Attributes
 * **************************************
 */
CheckCommand returns baseAttributes::CheckCommand:
    'check_command' reference=[baseAttributes::CommandName|CommandNameEntry];

CommandLine returns baseAttributes::CommandLine:
    'command_line' value=Entry;

CommandName returns baseAttributes::CommandName:
    'command_name' name=CommandNameEntry;

/* */
/**
 * Time definitions
 */
TimeperiodName returns baseAttributes::TimeperiodName:
    'timeperiod_name' name=TimeperiodNameEntry;

TimeDefinition returns eatime::TimeDefinition:
    {eatime::TimeDefinition} days=DateSpec ranges+=TimeRange (COMMA ranges+=TimeRange)*;

TimeExclude returns baseAttributes::TimeExclude:
    'exclude' reference+=[baseAttributes::TimeperiodName|TimeperiodNameEntry] (COMMA
    reference+=[baseAttributes::TimeperiodName|TimeperiodNameEntry])*;

/* */
/*
 * Contact
 */
/*
  * define contact{

    contact_name                    jdoe

    alias                           John Doe

    host_notifications_enabled        1

    service_notifications_enabled    1

    service_notification_period     24x7

    host_notification_period        24x7

    service_notification_options    w,u,c,r

    host_notification_options       d,u,r

    service_notification_commands   notify-by-email

    host_notification_commands      host-notify-by-email

    email            jdoe@localhost.localdomain

    pager            555-5555@pagergateway.localhost.localdomain

    address1            xxxxx.xyyy@icq.com

    address2            555-555-5555

    can_submit_commands    1

    }
  
  */
ContactName returns baseAttributes::ContactName:
    'contact_name' name=ContactNameEntry;

HostNotificationsEnabled returns baseAttributes::HostNotificationsEnabled:
    'host_notifications_enabled' enabled=TrueFalse;

ServiceNotificationsEnabled returns baseAttributes::ServiceNotificationsEnabled:
    'service_notifications_enabled' enabled=TrueFalse;

HostNotificationPeriod returns baseAttributes::HostNotificationPeriod:
    'host_notification_period' reference=[baseAttributes::TimeperiodName|TimeperiodNameEntry];

ServiceNotificationPeriod returns baseAttributes::ServiceNotificationPeriod:
    'service_notification_period' reference=[baseAttributes::TimeperiodName|TimeperiodNameEntry];

HostNotificationOptions returns baseAttributes::HostNotificationOptions hidden(IL_WS, COMMA):
    {baseAttributes::HostNotificationOptions}
    'host_notification_options' (recovery?='r'? & down?='d'? & unreachable?='u'? & flapping?='f'? &
    scheduledDowntime?='s'? & none?='n'?);

ServiceNotificationOptions returns baseAttributes::ServiceNotificationOptions:
    {baseAttributes::ServiceNotificationOptions}
    'service_notification_options' (warning?='w'? & unknown?='u'? & critical?='c'? & flapping?='f'? & none?='n'?);

HostNotificationCommands returns baseAttributes::HostNotificationCommands:
    'host_notification_commands' reference+=[baseAttributes::CommandName|CommandNameEntry] (COMMA
    reference+=[baseAttributes::CommandName|CommandNameEntry])*;

ServiceNotificationCommands returns baseAttributes::ServiceNotificationCommands:
    'service_notification_commands' reference+=[baseAttributes::CommandName|CommandNameEntry] (COMMA
    reference+=[baseAttributes::CommandName|CommandNameEntry])*;

Email returns baseAttributes::Email:
    'email' value=EmailAddress;

Pager returns baseAttributes::Pager:
    'pager' value=EmailAddress;

ContactAddress returns baseAttributes::ContactAddress:
    ContactAddress1 | ContactAddress2 | ContactAddress3 | ContactAddress4 | ContactAddress5 | ContactAddress6;

ContactAddress1 returns baseAttributes::ContactAddress:
    token='address1' value=Entry;

ContactAddress2 returns baseAttributes::ContactAddress:
    token='address2' value=Entry;

ContactAddress3 returns baseAttributes::ContactAddress:
    token='address3' value=Entry;

ContactAddress4 returns baseAttributes::ContactAddress:
    token='address4' value=Entry;

ContactAddress5 returns baseAttributes::ContactAddress:
    token='address5' value=Entry;

ContactAddress6 returns baseAttributes::ContactAddress:
    token='address6' value=Entry;

CanSubmitCommands returns baseAttributes::CanSubmitCommands:
    'can_submit_commands' enabled=TrueFalse;

    /*
define contactgroup{

    contactgroup_name        novell-admins

    alias            Novell Administrators

    members            jdoe,rtobert,tzach

    }
 */
ContactGroupName returns baseAttributes::ContactGroupName:
    'contactgroup_name' value=ContactGroupNameEntry;

ContactMembers returns baseAttributes::ContactMembers:
    'members' reference+=[baseAttributes::ContactName|ContactNameEntry] (COMMA
    reference+=[baseAttributes::ContactName|ContactNameEntry])*;

enum ServiceStateValue returns baseModel::ServiceStateValue:
    OK='o' | WARNING='w' | CRITICAL='c' | UNKNOWN='u';

enum HostStateValue returns baseModel::HostStateValue:
    UP='o' | DOWN='d' | UNREACHABLE='u';

HostNameEntry:
    UID;

HostgroupNameEntry:
    UID;

CommandNameEntry:
    UID;

TimeperiodNameEntry:
    UID;

ContactNameEntry:
    UID;

ContactGroupNameEntry:
    UID;

    /*
 * Common terminal rules
 */
IdOrKeyword:
    (UID | Keywords);

TrueFalse returns ecore::EBooleanObject:
    INT;

RealNumber returns ecore::EDouble hidden():
    DASH? INT ('.' INT)?;
    /*
 * The entry is a catchall rule
 */
Entry hidden():
    (UID | ANY | Keywords | IL_WS | NO_COMMENT | LOWER | UPPER | INT | STRING)+;

IpAddress returns baseModel::InetAddress hidden():
    INT '.' INT '.' INT '.' INT;

NameAddress returns baseModel::InetAddress hidden():
    UID ('.' UID)*;

EmailAddress returns baseModel::MailAddress:
    Entry;

CommentLine returns baseModel::CommentLine hidden():
    {baseModel::CommentLine} value=HASH_COMMENT;

    /**
 * Here are the time / date specific rules. 
 * timeperiods may be rather complex constructs ...
 * 
 */
 
DateSpec returns eatime::DateSpec:
    (NumericDateRange | DayRange | WeekDayRange | MonthRange) ('/' divisor=INT)?;

DayRange returns eatime::DayRange:
    'day' start=SignedNumber (DASH end=SignedNumber)?;

MonthRange returns eatime::MonthRange:
    start=MonthSpec (DASH end=MonthOptSpec)?;

MonthSpec returns eatime::MonthSpec:
    month=Month day=SignedNumber;

MonthOptSpec returns eatime::MonthSpec:
    month=Month? day=SignedNumber;

WeekDayRange returns eatime::WeekdayRange:
    start=WeekDaySpec (DASH end=WeekDaySpec)?;

WeekDaySpec returns eatime::WeekdaySpec:
    day=Weekday selector+=SignedNumber* month=Month?;

NumericDateRange returns eatime::NumericDateRange:
    start=NumericDate (DASH end=NumericDate)?;

NumericDate returns baseModel::Date hidden():
    DATETERM;

enum Weekday returns baseModel::Weekday:
    SU='sunday' | MO='monday' | TU='tuesday' | WE='wednesday' | TH='thursday' | FR='friday' | SA='saturday';

enum Month returns baseModel::Month:
    JAN='january' | FEB='february' | MAR='march' | APR='april' | MAY='may' | JUN='june' | JUL='july' | AUG='august'
    | SEP='september' |
    OCT='october' | NOV='november' | DEC='december';

TimeRange returns baseModel::TimeRange:
    TIMERANGETERM;

    /* 
     * These keywords are needed to avoid syntax errors in attribute values, that
      * may contain all characters. 
      */
Keywords:
    'notes' | 'contact_name' | 'check_interval' | 'timeperiod' | 'host_notifications_enabled' | 'event_handler_enabled'
    |
    'check_freshness' | 'r' | 'flap_detection_options' | 'exclude' | 'contacts' |
    'command' | 'monday' | 'obsess_over_host' | 'service_notification_options' | 'stalking_options' |
    '3d_coords' | 'host' | 'n' | 'saturday' | '{' | 'statusmap_image' |
    'february' | 'friday' | 'april' | 'command_line' | 'high_flap_threshold' |
    'command_name' | 'august' | 'f' | 'freshness_threshold' | 'january' | 'o' |
    's' | 'parents' | 'timeperiod_name' | 'contactgroup_name' | 'members' |
    'notification_options' | 'may' | 'address1' | 'alias' | 'host_notification_options' |
    'service_notification_commands' | 'host_notification_commands' |
    'c' | 'notes_url' | 'december' | 'november' |
    '2d_coords' | 'display_name' | 'address2' | 'event_handler' | 'd' |
    'retain_status_information' | 'july' | 'name' | 'max_check_attempts' | 'thursday' |
    'september' | 'day' | 'sunday' | 'retry_interval' | '/' |
    'tuesday' | 'march' | 'contact_groups' | 'hostgroup' | 'email' |
    'contactgroup' | 'service' | 'address3' | 'low_flap_threshold' | 'address' |
    'define' | '.' | 'flap_detection_enabled' | 'vrml_image' | 'passive_checks_enabled' |
    'address5' | 'contact' | 'service_notification_period' | 'address4' | 'w' |
    COMMA | 'active_checks_enabled' | 'initial_state' | 'process_perf_data' | 'address6' |
    'host_notification_period' | 'hostgroups' | 'host_group' | 'icon_image_alt' | 'use' |
    'can_submit_commands' | 'wednesday' | 'pager' | '}' | 'service_notifications_enabled' |
    'june' | 'october' | 'hostgroup_name' | 'retain_nonstatus_information' | 'notification_period' |
    'check_period' | 'host_name' | 'check_command' | 'icon_image' |
    'action_url' | 'u' | 'register' |
    'is_volatile' | 'obsess_over_service' |
    'servicegroup_members';

terminal fragment DIGIT:
    '0'..'9';

SignedNumber returns ecore::EInt hidden():
    DASH? INT;

terminal INT returns ecore::EInt:
    (DIGIT)+;

terminal TIME:
    DIGIT DIGIT COLON DIGIT DIGIT;

terminal TIMERANGETERM:
    TIME DASH TIME;

terminal DATETERM:
    DIGIT DIGIT DIGIT DIGIT DASH DIGIT DIGIT DASH DIGIT DIGIT;

terminal LOWER:
    'a'..'z';

terminal UPPER:
    'A'..'Z';
    // terminal ZERO: '0';
// terminal ONE: '1';
// erminal DIGIT: '2'..'9';
terminal DASH:
    '-';

terminal COMMA:
    ',';

terminal COLON:
    ':';

    // Just whitespace
terminal IL_WS:
    ' ' | '\t';

    // A comment after config attribute
terminal SL_COMMENT:
    ';' !('\n' | '\r')*;

    // Comment lines start with hash
terminal HASH_COMMENT:
    '#' !('\n' | '\r')*;

    // Using an extended ID terminal
terminal UID:
    ('^')? (LOWER | UPPER | '_') (LOWER | UPPER | '_' | DASH | INT)*;

    // maybe strings are needed 
terminal STRING:
    '"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
    "'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | "'"))* "'";

    // Only for integers

// This is needed for the catchall values
terminal NO_COMMENT:
    !(';' | '\n' | '\r');

    // Newline is needed in Nagios config files
terminal NL:
    ('\r')? '\n';

terminal ANY:
    .;
    


